#pragma once

// STL
#include <vector>

// GLAD
#include "glad/glad.h"

/**
 * Wraps OpenGL renderbuffer object into a convenient class. Provides handy
 * functions such as resizing, reading out some insights like number of bits used etc.
 */
class RenderBuffer
{
public:

    ~RenderBuffer();

    /**
     * Creates new renderbuffer with given internal format, width and height. To see supported internal formats,
     * open following link:
     *
     * https://www.khronos.org/registry/OpenGL-Refpages/gl4/html/glRenderbufferStorage.xhtml
     *
     * @param internalFormat  Internal format used
     * @param width           Renderbuffer height (in pixels)
     * @param height          Renderbuffer height (in pixels)
     *
     * @return True if renderbuffer has been  created successfully or false otherwise.
     */
    bool create(GLenum internalFormat, GLsizei width, GLsizei height);

    /**
     * Resizes renderbuffer to new width and height while keeping its original internal format.
     * Does nothing if renderbuffer hasn't been created before.
     * 
     * @param newWidth   New renderbuffer size (in pixels)
     * @param newHeight  New renderbuffer height (in pixels)
     *
     * @return True if renderbuffer has been resized successfully or false otherwise.
     */
    bool resize(GLsizei newWidth, GLsizei newHeight);

    /**
     * Gets OpenGL-assigned renderbuffer ID.
     */
    GLuint getID() const;

    /**
     * Gets internal storage format of the renderbuffer.
     */
    GLenum getInternalFormat() const;

    /**
     * Gets renderbuffer width (in pixels).
     */
    GLsizei getWidth() const;

    /**
     * Gets renderbuffer height (in pixels).
     */
    GLsizei getHeight() const;

    /**
     * Queries, caches and returns how many bits are used to represent depth in this renderbuffer.
     */
    GLint getDepthBits();

    /**
     * Queries, caches and returns how many bits are used to represent stencil in this renderbuffer.
     */
    GLint getStencilBits();

    /**
     * Deletes renderbuffer OpenGL object and resets class to its original state.
     */
    void deleteRenderBuffer();

private:
    GLuint renderBufferID_{ 0 }; // ID of the renderbuffer generated by OpenGL
    GLenum internalFormat_{ 0 }; // Internal format selected during creation
    GLsizei width_{ 0 }; // Width of the renderbuffer
    GLsizei height_{ 0 }; // Height of the renderbuffer

    GLint depthBits_{ -1 }; // Cached number of bits for depth
    GLint stencilBits_{ -1 }; // Cached number of bits for stencil
};
